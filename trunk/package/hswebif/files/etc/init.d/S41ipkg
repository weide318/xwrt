#!/bin/sh

doReboot=0

build_ipkg_config() {
    [ ! -d /etc/ipkg ] && {
	mkdir /etc/ipkg
	awk '$1 == "src" { print $2 " " $3 }' /etc/ipkg.conf > /etc/ipkg/ipkg.repos
	grep -v '^src' /etc/ipkg.conf > /etc/ipkg/ipkg.defs
    }
    rm -f /etc/ipkg.conf
    [ -e /etc/ipkg/ipkg.repos ] && { awk '{print "src " $1 " " $2}' /etc/ipkg/ipkg.repos >> /etc/ipkg.conf; }
    [ -e /etc/ipkg/ipkg.defs ] && { cat /etc/ipkg/ipkg.defs >> /etc/ipkg.conf; }
}

add_ipkg_repo() {
    grep -v "^$1 " /etc/ipkg/ipkg.repos > /etc/ipkg/ipkg.repos.new
    echo "$1 $2" >> /etc/ipkg/ipkg.repos.new
    mv /etc/ipkg/ipkg.repos.new /etc/ipkg/ipkg.repos
    build_ipkg_config
}

remove_ipkg_repo() {
    grep -v "^$1 " /etc/ipkg/ipkg.repos > /etc/ipkg/ipkg.repos.new
    mv /etc/ipkg/ipkg.repos.new /etc/ipkg/ipkg.repos
    rm -f /usr/lib/ipkg/lists/$1 2>&-
    build_ipkg_config
}
    
checkinst() {
    list=$(ipkg list_installed|grep "^$1 ")
    [ -z "$list" ] || return 1
    echo installing $1
    ipkg install $1
    return 0
}

checkupdate() {
    build_ipkg_config
    for s in $(awk '$1 == "src" { print $2 }' /etc/ipkg.conf); do
	[ ! -e /usr/lib/ipkg/lists/$s ] && ipkg update && return
    done
}

checkrequired() {
    for p in $(nvram show 2>&- | grep '^ipkg_' | awk -F= '{ print $1 }'); do
	p=${p#ipkg_}
	echo checking for $p
	checkinst $p && doReboot=1
    done
}

ipkg_is_required() {
    eval "v=\$(nvram get ipkg_$1)"
    [ "$v" = "on" ] && return 0
    return 1
}

ipkg_require() {
    eval "nvram set ipkg_$1=on"
}

ipkg_forget() {
    eval "nvram unset ipkg_$1"
}

ipkg_inst_required() {
    checkupdate
    checkrequired
}

case "$1" in
    inst)
	ipkg_inst_required
	;;

    start)
	checkupdate

	[ "$(nvram get ipkg_onboot)" = "on" ] || exit 0
	
	checkrequired
	
#        # get some non-free packages that we require
#	auth_mode=$(nvram get wl0_akm)
#	auth_mode=${auth_mode:-$(nvram get wl0_auth_mode)}
#	
#	[ -n "$(echo $auth_mode|egrep '^(wpa|psk)')" ] && checkinst nas && doReboot=1
#	[ -n "$(nvram get wl0_wds)" ] && checkinst wl && doReboot=1
#	
#        # if we are running a hotspot, get chillispot
# 	[ -n "$(nvram get hs_type)" ] && checkinst chillispot && doReboot=1
#	
#	[ "$doReboot" = "1" ] && reboot
	;;
esac
