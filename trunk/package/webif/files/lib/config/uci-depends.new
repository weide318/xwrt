#!/bin/sh
# Copyright (C) 2006 OpenWrt.org
# Copyright (C) 2006 Fokus Fraunhofer <carsten.tittel@fokus.fraunhofer.de>
# Copyright (C) 2006 Jeremy Collake <jeremy.collake@gmail.com> (X-Wrt)

# export over-ride to handle systems where 'export -n' is not implemented.
G_IS_EXPORT_N_AVAIL="-1"
nexport() {
	[ "$G_IS_EXPORT_N_AVAIL" = "-1" ] && {
		local ntest=$(export -n 2>&1)
		if echo "$ntest" | grep -iq "Illegal option -n"; then
			G_IS_EXPORT_N_AVAIL="0"
		else
			G_IS_EXPORT_N_AVAIL="1"
		fi
	}
	[ "$G_IS_EXPORT_N_AVAIL" = "1" ] && {
		export -n $*
	}
}

append() {
	local var="$1"
	local value="$2"
	local sep="${3:- }"
	
	eval "export -n -- \"$var=\${$var:+\${$var}\${value:+\$sep}}\$value\""
}

reset_cb() {
	config_cb() { return 0; }
	option_cb() { return 0; }
}
reset_cb

config () {
	local cfgtype="$1"
	local name="$2"
    
	_C=$((_C + 1))
	name="${name:-cfg${_C}}"
	config_cb "$cfgtype" "$name"
	CONFIG_SECTION="$name"
	nexport "CONFIG_${CONFIG_SECTION}_TYPE=$cfgtype"
}

option () {
	local varname="$1"; shift
	local value="$*"
	
	nexport "CONFIG_${CONFIG_SECTION}_${varname}=$value"
	option_cb "$varname" "$*"
}

config_rename() {
	local OLD="$1"
	local NEW="$2"
	local oldvar
	local newvar
	
	[ "$OLD" -a "$NEW" ] || return
	for oldvar in `set | grep ^CONFIG_${OLD}_ | \
		sed -e 's/\(.*\)=.*$/\1/'` ; do
		newvar="CONFIG_${NEW}_${oldvar##CONFIG_${OLD}_}"
		eval "export \"$newvar=\${$oldvar}\""
		unset "$oldvar"
	done
	CONFIG_SECTIONS="$(echo " $CONFIG_SECTIONS " | sed -e "s, $OLD , $NEW ,")"

	[ "$CONFIG_SECTION" = "$OLD" ] && CONFIG_SECTION="$NEW"
}

config_unset() {
	config_set "$1" "$2" ""
}

config_clear() {
	local SECTION="$1"
	local oldvar
	
	CONFIG_SECTIONS="$(echo " $CONFIG_SECTIONS " | sed -e "s, $OLD , ,")"
	CONFIG_SECTIONS="${SECTION:+$CONFIG_SECTIONS}"

	for oldvar in `set | grep ^CONFIG_${SECTION:+$SECTION_} | \
		sed -e 's/\(.*\)=.*$/\1/'` ; do 
		unset $oldvar 
	done
}

config_load() {
	local file="/etc/config/$1"
	_C=0
	CONFIG_SECTIONS=
	CONFIG_NUM_SECTIONS=0
	
	[ -e "$file" ] && {
		. $file
	} || return 1
	
	${CONFIG_SECTION:+config_cb}
}

config_get() {
	case "$3" in
		"") eval "echo \"\${CONFIG_${1}_${2}}\"";;
		*)  eval "export -- \"$1=\${CONFIG_${2}_${3}}\"";;
	esac
}

config_set() {
	local section="$1"
	local option="$2"
	local value="$3"
	nexport "CONFIG_${section}_${option}=$value"
}

config_foreach() {
	local function="$1"
	local section
	
	[ -z "$CONFIG_SECTIONS" ] && return 0
	for section in ${CONFIG_SECTIONS}; do
		eval "$function \"\$section\""
	done
}

# used by: /bin/uci
strtok() { # <string> { <variable> [<separator>] ... }
        local tmp
        local val="$1"
        local count=0

        shift

        while [ $# -gt 1 ]; do
                tmp="${val%%$2*}"

                [ "$tmp" = "$val" ] && break

                val="${val#$tmp$2}"

                export "$1=$tmp"; count=$((count+1))
                shift 2
        done

        if [ $# -gt 0 -a "$val" ]; then
                export "$1=$val"; count=$((count+1))
        fi

        return $count
}
